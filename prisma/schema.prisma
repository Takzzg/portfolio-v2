generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_SHADOW_URL")
}

model Account {
  id                       String                     @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  role                     Role                       @default(USER)
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  characterSheets          CharacterSheet[]
  LikesOnCharacterSheet    LikesOnCharacterSheet[]
  commentsOnCharacterSheet CommentsOnCharacterSheet[]

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CharacterSheet {
  id                       String                     @id @default(cuid())
  characterName            String
  characterData            String?
  public                   Boolean                    @default(false)
  authorId                 String
  author                   Account                    @relation(fields: [authorId], references: [id])
  LikesOnCharacterSheet    LikesOnCharacterSheet[]
  commentsOnCharacterSheet CommentsOnCharacterSheet[]
}

model LikesOnCharacterSheet {
  id_account String
  account    Account        @relation(fields: [id_account], references: [id])
  id_sheet   String
  sheet      CharacterSheet @relation(fields: [id_sheet], references: [id])

  @@id([id_account, id_sheet])
}

model CommentsOnCharacterSheet {
  id_account String
  account    Account        @relation(fields: [id_account], references: [id])
  id_sheet   String
  sheet      CharacterSheet @relation(fields: [id_sheet], references: [id])
  comment    String         @db.Text

  @@id([id_account, id_sheet])
}

enum Role {
  USER
  ADMIN
}
